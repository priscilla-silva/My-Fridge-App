Perhaps it will be better to implement the carousel in the component "card" 
and utilize the map function I already implemented
and just add the functionality of the carousel 

import styles from './Shelf.module.css'; 
import FoodItems from '../foodsAPI.json';

type CardInfo = {
  id?: number,
  item: string,
  amount: string,
  description: string,
  url?: string,
}

const CardProps = (props: CardInfo) => {
  return (
    <div>
      <h3 className={styles.item}>{props.item}</h3>
      <p className={styles.amnt}>{props.amount}</p>
      <p className={styles.desc}>{props.description}</p>
    </div>
  )
}

const Card = () => {
  return (
    <div className={styles.container}>
      {
        FoodItems.map(food => {
          return food.amount <= 1 ?
        <div className={styles.card}>
          <div className={styles.shelf} key={food.id}>
              <img src={food.url} width={200} alt="" />
              <CardProps item={food.item} amount={`${food.amount} piece`} description={food.description} />
              </div>
        </div>
            :
            <div className={styles.card}>
          <div className={styles.shelf} key={food.id}>
              <img src={food.url} width={200} alt="" />
              <CardProps item={food.item} amount={`${food.amount} pieces`} description={food.description} />
              </div>
              </div>
        })
      }
      
    </div>
  )
}

export default Card;

https://my-json-server.typicode.com/priscilla-silva/FoodsAPI/users


const [details, setDetails] = useState({ name:"", email:"", password:""})
  const [error, setError] = useState("")


  const userDetails = {
    name: "Britney Spears",
    email: "britney@gmail.com",
    password: "1234"
  }

  const navigate = useNavigate();
  const userLogin = (details: { name: string; email: string; password: string }) => {
    console.log(details)

    if (details.email === userDetails.email && details.password === userDetails.password) {
      navigate("/fridge")
    } else {
      alert('Incorrect email and/or password')
    }
  }

  onChange={_event => setDetails({...details, email: _event.target.value})} value={details.email}

  
  const submitHandler = (event: { preventDefault: () => void }) => {
    event.preventDefault();

    userLogin(details);
  }

  const userLogout = (details: any) => {
    console.log("Logout")
  }

//ARROWS

  const DairyProducts = () => {
  const [currCard, setCurrCard] = useState(FoodItems[0].DairyProducts.map(food => {
    return food.amount <= 1 ?
      <Card key={food.id} url={food.url} item={food.item} amount={`${food.amount} piece`} description={food.description} />
      :
      <Card key={food.id} url={food.url} item={food.item} amount={`${food.amount} pieces`} description={food.description} />
  }).slice(0,2)
  );
  const HandleClickRight = () => {
    setCurrCard(FoodItems[0].DairyProducts.map(food => 
              <Card url={food.url} item={food.item} amount={`${food.amount} pieces`} description={food.description} /> 
          ).slice(0,2))
  }
  const HandleClickLeft = () => {
    setCurrCard(FoodItems[0].DairyProducts.map(food => 
              <Card url={food.url} item={food.item} amount={`${food.amount} pieces`} description={food.description} /> 
          ).slice(0,2))
  }

  <section className={styles.shelf}>
      <h3 className={styles.sectionTitle}>Dairy Products</h3>
        <div className={styles.container}>
        <FontAwesomeIcon icon={faChevronLeft} className={styles.arrowBack} onClick={HandleClickLeft} />
        {currCard}
        <FontAwesomeIcon icon={faChevronRight} className={styles.arrowForward} onClick={HandleClickRight} />
      </div>

    </section>